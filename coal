#!/usr/bin/env bash
# set -x
# vim: fdm=marker:noai:ts=4:sw=4
#
# Coal
#
# Created by Dylan Araps
#
# https://github.com/dylanaraps/coal

# Speed up script by not using unicode
export LC_ALL=C
export LANG=C

# Colors from 0-15
c=(
    '#232c33'
    '#99736e'
    '#78a090'
    '#bfb7a1'
    '#7c9fa6'
    '#BF9C86'
    '#99BFBA'
    '#f0f0f0'
    '#70838c'
    '#99736e'
    '#78a090'
    '#bfb7a1'
    '#7c9fa6'
    '#BF9C86'
    '#99BFBA'
    '#f0f0f0'
)

# Color functions {{{


# Xresources {{{

xresources() {
    # Special colors
    printf "%s\n" "*.foreground:  ${c[7]}"
    printf "%s\n" "*.background:  ${c[0]}"
    printf "%s\n" "*.cursorColor: ${c[7]}"

    for col in "${c[@]}"; do
        printf "%s\n" "*.color${num:-0}:${space:-  }    ${col}"
        num=$((num+=1))

        # Align the colors
        [ "${#num}" == 2 ] && space=" "
    done
}

# }}}

# Shell Variables {{{

shell() {
    for col in "${c[@]}"; do
        printf "%s\n" "export color${num:-0}='${col}'"
        num=$((num+=1))
    done
}

# }}}

# GTK2 Theme {{{


gtk2() {
    for col in "${c[@]}"; do
        printf "%s\n" "gtk_color_scheme = \"color_${num:-0}:${space:-  }${col}\""
        num=$((num+=1))

        # Align the colors
        [ "${#num}" == 2 ] && space=" "
    done
}


# }}}

# Firefox CSS {{{

firefox() {
    printf "%s\n" "/* Color variables */"
    printf "%s\n" ":root {"

    for col in "${c[@]}"; do
        printf "%s\n" "    --color${num:-0}:${space:-  }${col};"
        num=$((num+=1))

        # Align the colors
        [ "${#num}" == 2 ] && space=" "
    done

    printf "%s\n" "}"
}

# }}}

# iTerm2 Theme {{{

iterm () {
    printf "%s\n" "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    printf "%s\n" "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">"
    printf "%s\n" "<plist version=\"1.0\">"
    printf "%s\n" "<dict>"

    div () {
        if [ $1 -eq 255 ]; then
            printf "%s\n" "1.0"
        else
            printf "%s\n" "0.$((${1:-0}0000000000000000/${2:-0}))"
        fi
    }

    for col in "${c[@]}"; do
        red=$(div $((16#${col:1:2})) 255)
        green=$(div $((16#${col:3:2})) 255)
        blue=$(div $((16#${col:5:2})) 255)

        printf "%s\n" "        <key>Ansi ${num:-0} Color</key>"
        printf "%s\n" "        <dict>"
        printf "%s\n" "                <key>Blue Component</key>"
        printf "%s\n" "                <real>$blue</real>"
        printf "%s\n" "                <key>Green Component</key>"
        printf "%s\n" "                <real>$green</real>"
        printf "%s\n" "                <key>Red Component</key>"
        printf "%s\n" "                <real>$red</real>"
        printf "%s\n" "        </dict>"

        num=$((num+=1))
    done

    printf "%s\n" "</dict>"
    printf "%s\n" "</plist>"
# Openbox {{{

openbox() {
    printf "%s\n" "\
# Titlebar colors
window.active.title.bg.color:       ${c[${1:-0}]}
window.inactive.title.bg.color:     ${c[${2:-0}]}
window.active.label.text.color:     ${c[7]}
window.inactive.label.text.color:   ${c[7]}
window.*.button.*.image.color:      ${c[7]}

# Menu colors
menu*.bg.color:                     ${c[7]}
menu*.text.color:                   ${c[0]}
menu.border.color:                  ${c[7]}
menu.separator.color:               ${c[7]}

# Border colors
window.active.border.color:         ${c[7]}
window.inactive.border.color:       ${c[7]}"
}

# }}}


# }}}


# Args {{{

# If args are empty.
if [ $# -eq 0 ]; then
    printf "%s\n" "Coal must be run with flags."
    exit 1
fi

while [ "$1" ]; do
    case $1 in
        --colors) c=(${@//--*}) ;;
        --xresources) xresources ;;
        --shell) shell ;;
        --gtk2) gtk2 ;;
        --firefox) firefox ;;
        --iterm) iterm ;;
        --openbox) openbox "${2//--*}" "${3//--*}" ;;
    esac

    shift
done

# }}}
